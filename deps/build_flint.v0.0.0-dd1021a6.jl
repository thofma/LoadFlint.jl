using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libflint"], :libflint),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/benlorenz/flint_jll.jl/releases/download/flint-v0.0.0-dd1021a6+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64) => ("$bin_prefix/flint.v0.0.0-dd1021a6.x86_64-apple-darwin14.tar.gz", "98a310eaaf2e57c32864f940b104ef28ffbcec51dab4210eef71d43d1450f1d7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/flint.v0.0.0-dd1021a6.x86_64-linux-gnu.tar.gz", "99ed739e541bf735cb187b4d798677b101f8c766d122686dcdfec0f311fd0a91"),
    Windows(:x86_64) => ("$bin_prefix/flint.v0.0.0-dd1021a6.x86_64-w64-mingw32.tar.gz", "260be0340c194490a28642a1195d97183e7224e576d006d10f165c701b1f4002"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
